using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using SubDataNodeIdentity = System.Guid;
using RelationPartIdentity = System.String;
namespace OOAdvantech.MetaDataRepository.ObjectQueryLanguage
{
#if PORTABLE
    public class DataObjectsInstantiator : IDataObjectsInstantiator
    {

    #region IDataObjectsInstantiator Members

        public IDataSet CreateDataSet()
        {
            return new DataObjects.DataSet();
            //return new DataSet();
        }

        public IDataTable CreateDataTable(bool autoGenerated)
        {
            return new DataObjects.DataTable(autoGenerated);
            //return new DataTable(autoGenerated);
        }

        public IDataTable CreateDataTable()
        {
            return new DataObjects.DataTable(false);
            //return new DataTable(false);
        }
        public IDataTable CreateDataTable(bool autoGenerated, Guid dataSourceIdentity)
        {
            return new DataObjects.DataTable(autoGenerated) { DataSourceIdentity = dataSourceIdentity };
            //return new DataTable(autoGenerated) { DataSourceIdentity = dataSourceIdentity };
        }

        public IDataTable CreateDataTable(DataLoader.StreamedTable streamedTable)
        {
            return new DataObjects.DataTable(streamedTable);
            //return new DataTable(streamedTable);
        }

        public IDataTable CreateDataTable(string tableName)
        {
            return new DataObjects.DataTable(tableName);
            //return new DataTable(tableName);
        }

    #endregion
    }

#else
    /// <MetaDataID>{9e55c735-7f6c-4e73-89be-66200d9f6546}</MetaDataID>
       public class DataObjectsInstantiator : IDataObjectsInstantiator
    {

    #region IDataObjectsInstantiator Members

        public IDataSet CreateDataSet()
        {
            //return new DataObjects.DataSet();
            return new DataSet();
        }

        public IDataTable CreateDataTable(bool autoGenerated)
        {
            //return new DataObjects.DataTable(autoGenerated);
            return new DataTable(autoGenerated);
        }

        public IDataTable CreateDataTable()
        {
            //return new DataObjects.DataTable(false);
            return new DataTable(false);
        }
        public IDataTable CreateDataTable(bool autoGenerated, Guid dataSourceIdentity)
        {
            //return new DataObjects.DataTable(autoGenerated) { DataSourceIdentity = dataSourceIdentity };
            return new DataTable(autoGenerated) { DataSourceIdentity = dataSourceIdentity };
        }

        public IDataTable CreateDataTable(DataLoader.StreamedTable streamedTable)
        {
            //return new DataObjects.DataTable(streamedTable);
            return new DataTable(streamedTable);
        }

        public IDataTable CreateDataTable(string tableName)
        {
            //return new DataObjects.DataTable(tableName);
            return new DataTable(tableName);
        }

    #endregion
    }
       /// <MetaDataID>{e4df14ff-c362-4bb5-b1a8-8b4d1f8519a4}</MetaDataID>
    public class DataTable : System.Data.DataTable, IDataTable
    {

        Dictionary<string, object> _ExtendedProperties;
        Dictionary<string, object> IDataTable.ExtendedProperties
        {
            get
            {
                if (_ExtendedProperties == null)
                    _ExtendedProperties = new Dictionary<string, object>();
                return _ExtendedProperties;
            }
        }

        bool _TemporaryTableTransfered;
        bool IDataTable.TemporaryTableTransfered
        {
            get
            {
                return _TemporaryTableTransfered;
            }
            set
            {
                _TemporaryTableTransfered = true;
            }
        }
        public bool _FilteredTable = false;
        public bool FilteredTable
        {
            get
            {
                return _FilteredTable;
            }
            set
            {
                _FilteredTable = value;
            }
        }

        DataSource _OwnerDataSource;
        public DataSource OwnerDataSource
        {
            get
            {
                return _OwnerDataSource;
            }
            set
            {
                _OwnerDataSource = value;
            }
        }
        Guid _DataSourceIdentity;
        public Guid DataSourceIdentity
        {
            get
            {
                return _DataSourceIdentity;
            }
            set
            {
                _DataSourceIdentity = value;
            }
        }

        byte[] Buffer = new byte[40];
        int Offset = 0;

        bool AutoGenerated = false;
        internal DataTable(bool autoGenerated)
        {
            AutoGenerated = autoGenerated;
        }

        internal DataTable(string tableName)
            : base(tableName)
        {
        }

        IDataRowCollection IDataTable.Rows
        {
            get
            {
                return new DataRowCollection(Rows);
            }
        }
        IDataRow IDataTable.NewRow()
        {
            return NewRow() as IDataRow;
        }



        void IDataTable.Clear()
        {
            Clear();
        }

        void IDataTable.RemoveTableRelations()
        {
            RemoveTableRelations();
        }
        void IDataTable.Merge(IDataTable dataTable)
        {
            Merge(dataTable as System.Data.DataTable);
        }
        IDataRow IDataTable.LoadDataRow(object[] values, LoadOption loadOption)
        {
            System.Data.LoadOption sysDataLoadOption = System.Data.LoadOption.OverwriteChanges;
            if (loadOption == LoadOption.PreserveChanges)
                sysDataLoadOption = System.Data.LoadOption.PreserveChanges;
            if (loadOption == LoadOption.Upsert)
                sysDataLoadOption = System.Data.LoadOption.Upsert;

            return LoadDataRow(values, sysDataLoadOption) as IDataRow;

        }
        protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder)
        {

            return new DataRow(builder);
            //return base.NewRowFromBuilder(builder);
        }


#if !PORTABLE


        internal DataTable(DataLoader.StreamedTable streamedTable)
        {
            TableName = BinaryFormatter.BinaryFormatter.ToString(streamedTable.StreamedData, Offset, ref Offset);
            int columnsCount = BinaryFormatter.BinaryFormatter.ToInt32(streamedTable.StreamedData, Offset, ref Offset, true);
            for (int i = 0; i != columnsCount; i++)
            {
                string columnName = BinaryFormatter.BinaryFormatter.ToString(streamedTable.StreamedData, Offset, ref Offset);
                string dataType = BinaryFormatter.BinaryFormatter.ToString(streamedTable.StreamedData, Offset, ref Offset);
                Columns.Add(columnName, ModulePublisher.ClassRepository.GetType(dataType, ""));
            }
            int rowsCount = BinaryFormatter.BinaryFormatter.ToInt32(streamedTable.StreamedData, Offset, ref Offset, true);
            for (int i = 0; i != rowsCount; i++)
            {
                byte[] rowBuffer = BinaryFormatter.BinaryFormatter.ToBytes(streamedTable.StreamedData, Offset, ref Offset);
                int rowOffset = 0;
                System.Data.DataRow row = NewRow();
                for (int columnIndex = 0; columnIndex != columnsCount; columnIndex++)
                {

                    //if (!Columns[columnIndex].DataType.IsPrimitive && !Columns[columnIndex].DataType.IsValueType)
                    if (!BinaryFormatter.BinaryFormatter.IsSerializeable(Columns[columnIndex].DataType))////if (Columns[columnIndex].DataType.IsSubclassOf(typeof(MarshalByRefObject)))
                    {

                        int index = BinaryFormatter.BinaryFormatter.ToInt32(rowBuffer, rowOffset, ref rowOffset, false);

                        object value = streamedTable.Objects[index];
#if DISTRIBUTED_TRANSACTIONS
                        if (Columns[columnIndex].DataType == typeof(Transactions.Transaction) && value is string)
                        {
                            value = Transactions.TransactionRunTime.UnMarshal(value as string);
                            streamedTable.Objects[index] = value;
                        }
#endif

                        row[columnIndex] = value;
                    }
                    else
                    {
                        try
                        {
                            object value = BinaryFormatter.BinaryFormatter.ToObject(Columns[columnIndex].DataType, rowBuffer, rowOffset, ref rowOffset);
                            if (value != null)
                                row[columnIndex] = value;
                            else
                                row[columnIndex] = System.DBNull.Value;
                        }
                        catch (System.Exception error)
                        {
                            throw error;
                        }
                    }
                }
                Rows.Add(row);
            }


            int tt = 0;
        }

        /// <summary>
        /// Serialize table
        /// </summary>
        /// <returns></returns>

        internal DataLoader.StreamedTable SerializeTable()
        {

            DataLoader.StreamedTable streamedTable = new DataLoader.StreamedTable();
            streamedTable.DataSourceIdentity = DataSourceIdentity;
            Offset = 0;
            System.IO.MemoryStream memoryStream = new System.IO.MemoryStream();

            if (TableName != null && (TableName.Length * 2) + 2 + 4 > Buffer.Length)
                Buffer = new byte[Buffer.Length * 4];
            BinaryFormatter.BinaryFormatter.Serialize(TableName, Buffer, Offset, ref Offset);
            BinaryFormatter.BinaryFormatter.Serialize(Columns.Count, Buffer, Offset, ref Offset, true);
            for (int i = 0; i != Columns.Count; i++)
            {
                System.Data.DataColumn column = Columns[i];
                if (BinaryFormatter.BinaryFormatter.Size(column.ColumnName, typeof(string)) + BinaryFormatter.BinaryFormatter.Size(column.DataType.FullName, typeof(string)) + 4 > Buffer.Length - Offset)
                {
                    if (Offset > 0)
                        memoryStream.Write(Buffer, 0, Offset);
                    Offset = 0;
                    int newBufferSize = (Buffer.Length + BinaryFormatter.BinaryFormatter.Size(column.ColumnName, typeof(string)) + BinaryFormatter.BinaryFormatter.Size(column.DataType.FullName, typeof(string))) * 2;
                    Buffer = new byte[newBufferSize];
                }

                BinaryFormatter.BinaryFormatter.Serialize(Columns[i].ColumnName, Buffer, Offset, ref Offset);
                BinaryFormatter.BinaryFormatter.Serialize(Columns[i].DataType.FullName, Buffer, Offset, ref Offset);
            }
            if (Buffer.Length - Offset <= 4)
            {
                memoryStream.Write(Buffer, 0, Offset);
                Offset = 0;
            }
            int count = 0;
            if (FilteredTable)
            {
                ///TODO SearchCondition

                foreach (System.Data.DataRow row in Rows)
                {

                    //bool rowRemove = true;
                    //if (OwnerDataSource.DataNode.SearchConditions.Count == 0)
                    //    rowRemove = false;
                    //foreach (var searchCondition in OwnerDataSource.DataNode.SearchConditions)
                    //{
                    //    if (!searchCondition.IsRemovedRow(row, OwnerDataSource.RowRemoveIndex))
                    //    {
                    //        rowRemove = false;
                    //        break;
                    //    }
                    //}
                    //if (OwnerDataSource.DataNode.SearchCondition != null && OwnerDataSource.DataNode.SearchCondition.IsRemovedRow(row, -1)) // OwnerDataSource.RowRemoveIndex))#region RowRemove code
                    //    continue;
                    count++;
                }
            }
            else
                count = Rows.Count;
            if (AutoGenerated)
            {
                count = 0;
                BinaryFormatter.BinaryFormatter.Serialize(count, Buffer, Offset, ref Offset, true);
                memoryStream.Write(Buffer, 0, Offset);
            }
            else
            {

                BinaryFormatter.BinaryFormatter.Serialize(count, Buffer, Offset, ref Offset, true);


                memoryStream.Write(Buffer, 0, Offset);
                byte[] rowBuffer = new byte[40];

                foreach (System.Data.DataRow row in Rows)
                {

                    ///TODO SearchCondition
                    //bool rowRemove = true;
                    //if (OwnerDataSource.DataNode.SearchConditions.Count == 0)
                    //    rowRemove = false;
                    //foreach (var searchCondition in OwnerDataSource.DataNode.SearchConditions)
                    //{
                    //    if (!searchCondition.IsRemovedRow(row, OwnerDataSource.RowRemoveIndex))
                    //    {
                    //        rowRemove = false;
                    //        break;
                    //    }
                    //}
                    //if (rowRemove)
                    //    continue;

                        #region RowRemove code
                    //if (FilteredTable && OwnerDataSource.DataNode.SearchCondition != null && OwnerDataSource.DataNode.SearchCondition.IsRemovedRow(row, -1)) //OwnerDataSource.RowRemoveIndex)) #region RowRemove code
                    //    continue;
                        #endregion

                    int rowBufferOffset = 0;
                    int rowSize = 0;
                    for (int i = 0; i != Columns.Count; i++)
                    {
                        if (!BinaryFormatter.BinaryFormatter.IsSerializeable(Columns[i].DataType))// !Columns[i].DataType.IsPrimitive&&!Columns[i].DataType.IsValueType)// .IsSubclassOf(typeof(MarshalByRefObject)))
                            rowSize += 4;
                        else
                            rowSize += BinaryFormatter.BinaryFormatter.Size(row[i], Columns[i].DataType);
                    }
                    if (rowBuffer.Length <= rowSize)
                        rowBuffer = new byte[rowSize * 2];

                    //TODO τί γίνεται όταν η τιμή είναι NULL
                    for (int i = 0; i != Columns.Count; i++)
                    {
                        if (!BinaryFormatter.BinaryFormatter.IsSerializeable(Columns[i].DataType))//if (!Columns[i].DataType.IsPrimitive && !Columns[i].DataType.IsValueType)
                        {
                            if (streamedTable.Objects == null)
                                streamedTable.Objects = new Collections.Generic.Dictionary<object, object>();

                            int index = streamedTable.Objects.Count;
                            object value = row[i];
                            if (value is OOAdvantech.Transactions.TransactionRunTime)
                                streamedTable.Objects.Add(index, (value as OOAdvantech.Transactions.TransactionRunTime).Marshal());
                            else
                                streamedTable.Objects.Add(index, value);
                            BinaryFormatter.BinaryFormatter.Serialize(index, rowBuffer, rowBufferOffset, ref rowBufferOffset, false);
                        }
                        else
                        {
                            if (row[i] is System.DBNull)
                                BinaryFormatter.BinaryFormatter.Serialize(null, Columns[i].DataType, rowBuffer, rowBufferOffset, ref rowBufferOffset);
                            else
                                BinaryFormatter.BinaryFormatter.Serialize(row[i], Columns[i].DataType, rowBuffer, rowBufferOffset, ref rowBufferOffset);
                        }
                    }

                    int rowStreamSize = rowBufferOffset;

                    if (Buffer.Length < rowStreamSize)
                        Buffer = new byte[rowStreamSize * 2];
                    Offset = 0;
                    BinaryFormatter.BinaryFormatter.Serialize(rowBuffer, 0, rowStreamSize, Buffer, Offset, ref Offset);
                    memoryStream.Write(Buffer, 0, Offset);
                }
            }


            if (streamedTable.Objects != null)
            {
                int countm = streamedTable.Objects.Count;
            }

            streamedTable.StreamedData = memoryStream.GetBuffer();
            return streamedTable;


        }
#endif


                        internal void RemoveTableRelations()
        {
            RemoveChildRelations();
            RemoveParentRelations();
        }

        internal void RemoveChildRelations()
        {
            while (ChildRelations.Count > 0)
                ChildRelations.RemoveAt(0);
        }

        internal void RemoveParentRelations()
        {
            while (ParentRelations.Count > 0)
                ParentRelations.RemoveAt(0);
        }

        internal void Merge(DataTable dataTable)
        {

            foreach (System.Data.DataColumn column in dataTable.Columns)
            {
                if (!Columns.Contains(column.ColumnName))
                    Columns.Add(column.ColumnName, column.DataType);
            }

            Constraints.Clear();
            int[] indices = new int[Columns.Count];
            object[] values = new object[indices.Length];

            for (int i = 0; i != Columns.Count; i++)
                indices[i] = dataTable.Columns.IndexOf(Columns[i].ColumnName);
            foreach (System.Data.DataRow row in dataTable.Rows)
            {
                for (int i = 0; i != indices.Length; i++)
                {
                    if (indices[i] != -1)
                        values[i] = row[indices[i]];
                    else
                        values[i] = DBNull.Value;
                }
                LoadDataRow(values, System.Data.LoadOption.OverwriteChanges);
            }

        }

    #region IDataTable Members

        IDataSet IDataTable.DataSet
        {
            get
            {

                return DataSet as IDataSet;
            }
        }


        //IDataColumn IDataTable.AddColumn(string columnName, Type type)
        //{
        //    DataColumn dataColumn = new DataColumn(columnName, type);
        //    Columns.Add(dataColumn);
        //    return dataColumn;
        //}

        IDataColumn[] IDataTable.PrimaryKey
        {
            get
            {
                return PrimaryKey.OfType<IDataColumn>().ToArray();
            }
            set
            {
                PrimaryKey = value.OfType<System.Data.DataColumn>().ToArray();
            }
        }




        RelationPartIdentity IDataTable.TableName
        {
            get
            {
                return TableName;
            }
            set
            {
                TableName = value;
            }
        }

        IDataRelationCollection IDataTable.ChildRelations
        {
            get
            {
                return new DataRelationCollection(ChildRelations);
            }
        }

        IDataRelationCollection IDataTable.ParentRelations
        {
            get
            {
                return new DataRelationCollection(ParentRelations);
            }
        }

        void IDataTable.BeginLoadData()
        {
            BeginLoadData();
        }
        void IDataTable.EndLoadData()
        {

            EndLoadData();
        }



        IDataColumnCollection _Columns;


        IDataColumnCollection IDataTable.Columns
        {
            get
            {

                if (_Columns == null)
                    _Columns = new DataColumnCollection(Columns);
                return _Columns;
            }
        }

    #endregion

    #region IDataTable Members


        DataSource IDataTable.OwnerDataSource
        {
            get
            {
                return _OwnerDataSource;
            }
            set
            {
                _OwnerDataSource=value;
            }
        }

        DataLoader.StreamedTable IDataTable.SerializeTable()
        {
            return SerializeTable();
        }

    #endregion

    #region IDataTable Members


        IDataReader IDataTable.CreateDataReader()
        {
            return new DataReader(CreateDataReader());
        }

    #endregion
    }

    /// <MetaDataID>{ca3386c5-073e-43ef-9a25-a16bef688a8b}</MetaDataID>
    public class DataRow : System.Data.DataRow, IDataRow
    {

        protected internal DataRow(System.Data.DataRowBuilder builder)
            : base(builder)
        {

        }



        object IDataRow.this[int columnIndex]
        {
            get
            {
                return this[columnIndex];
            }
            set
            {
                this[columnIndex] = value;
            }
        }
        void IDataRow.Delete()
        {
            Delete();
        }

        object IDataRow.this[string columnName]
        {
            get
            {
                return this[columnName];
            }
            set
            {
                this[columnName] = value;
            }
        }

        object[] IDataRow.ItemArray
        {
            get
            {
                return ItemArray;
            }
            set
            {
                ItemArray = value;
            }
        }

        IDataTable IDataRow.Table
        {
            get
            {
                return Table as IDataTable;
            }
        }

        IDataRow[] IDataRow.GetChildRows(string relationName)
        {
            var nativeRows = GetChildRows(relationName);
            IDataRow[] rows = new IDataRow[nativeRows.Length];
            int i = 0;
            foreach (IDataRow row in nativeRows)
                rows[i++] = row;
            return rows;
        }

        IDataRow[] IDataRow.GetParentRows(string relationName)
        {
            var nativeRows = GetParentRows(relationName);
            IDataRow[] rows = new IDataRow[nativeRows.Length];
            int i = 0;
            foreach (IDataRow row in nativeRows)
                rows[i++] = row;
            return rows;
        }

        IDataRow IDataRow.GetParentRow(string relationName)
        {
            return GetParentRow(relationName) as IDataRow;
        }


    }

    /// <MetaDataID>{7a3daf6f-c976-4c01-bc5e-881cf0064f11}</MetaDataID>
    public class DataSet : System.Data.DataSet, IDataSet
    {




    #region IDataSet Members

        void IDataSet.AddTable(IDataTable dataTable)
        {
            Tables.Add(dataTable as DataTable);
        }

        void IDataSet.RemoveTable(IDataTable dataTable)
        {
            Tables.Remove(dataTable as DataTable);
        }

        IDataRelationCollection IDataSet.Relations
        {
            get
            {
                return new DataRelationCollection(Relations);
            }
        }
        IDataTableCollection IDataSet.Tables
        {
            get
            {
                return new DataTableCollection(Tables);
            }
        }

    #endregion
    }

    /// <MetaDataID>{66e9e37f-b7ba-4463-9888-849afc1477ea}</MetaDataID>
    public class DataColumn : System.Data.DataColumn, IDataColumn
    {
        internal DataColumn()
        {
            
        }
        internal DataColumn(string columnName, Type dataType)
            : base(columnName, dataType)
        {

        }

        internal DataColumn(string columnName)
            : base(columnName)
        {

        }

    #region IDataColumn Members


        IDataTable IDataColumn.Table
        {
            get
            {
                return Table as IDataTable;
            }
        }

        int IDataColumn.Ordinal
        {
            get
            {
                return Ordinal;

            }

        }
        bool IDataColumn.ReadOnly
        {
            get
            {
                return ReadOnly;

            }
            set
            {
                ReadOnly = value;
            }

        }



        string IDataColumn.ColumnName
        {
            get
            {
                return ColumnName;
            }
            set
            {
                ColumnName = value;
            }
        }

        System.Type IDataColumn.DataType
        {
            get
            {
                return DataType;
            }
            set
            {
                DataType = value;
            }
        }

    #endregion
    }

 
    /// <MetaDataID>{dc82ced2-13b4-427d-b163-ce953310bcef}</MetaDataID>
    public class DataTableCollection : IDataTableCollection
    {
        System.Data.DataTableCollection NativeDataTableCollection;
        public DataTableCollection(System.Data.DataTableCollection nativeDataTableCollection)
        {
            NativeDataTableCollection = nativeDataTableCollection;
        }


    #region IDataTableCollection Members

        IDataTable IDataTableCollection.this[int index]
        {
            get
            {
                return NativeDataTableCollection[index] as IDataTable;
            }
        }

        IDataTable IDataTableCollection.this[string name]
        {
            get
            {
                return NativeDataTableCollection[name] as IDataTable;
            }
        }

        IDataTable IDataTableCollection.Add()
        {
            DataTable newTable = new DataTable(false);
            NativeDataTableCollection.Add(newTable);
            return newTable;
        }

        void IDataTableCollection.Add(IDataTable table)
        {
            NativeDataTableCollection.Add(table as System.Data.DataTable);
        }

        IDataTable IDataTableCollection.Add(string name)
        {
            DataTable newTable = new DataTable(false);
            newTable.TableName = name;
            NativeDataTableCollection.Add(newTable);
            return newTable;
        }

        bool IDataTableCollection.CanRemove(IDataTable table)
        {
            return NativeDataTableCollection.CanRemove(table as System.Data.DataTable);
        }

        void IDataTableCollection.Clear()
        {
            NativeDataTableCollection.Clear();

        }

        bool IDataTableCollection.Contains(string name)
        {
            return NativeDataTableCollection.Contains(name);
        }

        int IDataTableCollection.IndexOf(IDataTable table)
        {
            return NativeDataTableCollection.IndexOf(table as System.Data.DataTable);
        }

        int IDataTableCollection.IndexOf(string tableName)
        {
            return NativeDataTableCollection.IndexOf(tableName);
        }

        void IDataTableCollection.Remove(IDataTable table)
        {
            NativeDataTableCollection.Remove(table as System.Data.DataTable);

        }

        void IDataTableCollection.Remove(string name)
        {
            NativeDataTableCollection.Remove(name);
        }

        void IDataTableCollection.RemoveAt(int index)
        {
            NativeDataTableCollection.RemoveAt(index);
        }

    #endregion
    }

    /// <MetaDataID>{ddc8f0f9-23aa-4e93-b9f0-ae2de3e82f9c}</MetaDataID>
    public class DataColumnCollection : IDataColumnCollection
    {
        System.Data.DataColumnCollection NativeDataColumnCollection;
        public DataColumnCollection(System.Data.DataColumnCollection nativeDataColumnCollection)
        {
            NativeDataColumnCollection = nativeDataColumnCollection;
        }

    #region IDataColumnCollection Members

        public IDataColumn this[int index]
        {
            get
            {
                return NativeDataColumnCollection[index] as IDataColumn;
            }
        }

        public IDataColumn this[string name]
        {
            get
            {
                return NativeDataColumnCollection[name] as IDataColumn;
            }
        }

        public IDataColumn Add()
        {
            var dataColumn = new DataColumn();
            NativeDataColumnCollection.Add(dataColumn);
            return dataColumn;
        }

        public void Add(IDataColumn column)
        {
            NativeDataColumnCollection.Add(column as System.Data.DataColumn);
        }

        public IDataColumn Add(string columnName)
        {
            var dataColumn = new DataColumn(columnName);
            NativeDataColumnCollection.Add(dataColumn);
            return dataColumn;
        }

        public IDataColumn Add(string columnName, Type type)
        {
            var dataColumn = new DataColumn(columnName, type);
            NativeDataColumnCollection.Add(dataColumn);
            return dataColumn;
        }



        public void AddRange(IDataColumn[] columns)
        {
            NativeDataColumnCollection.AddRange(columns.OfType<System.Data.DataColumn>().ToArray());
        }

        public bool CanRemove(IDataColumn column)
        {
            return NativeDataColumnCollection.CanRemove(column as DataColumn);
        }

        public void Clear()
        {
            NativeDataColumnCollection.Clear();
        }

        public bool Contains(string name)
        {
            return NativeDataColumnCollection.Contains(name);
        }



        public int IndexOf(IDataColumn column)
        {
            return NativeDataColumnCollection.IndexOf(column as DataColumn);
        }

        public int IndexOf(string columnName)
        {
            return NativeDataColumnCollection.IndexOf(columnName);
        }

        public void Remove(IDataColumn column)
        {
            NativeDataColumnCollection.Remove(column as DataColumn);
        }

        public void Remove(string name)
        {
            NativeDataColumnCollection.Remove(name);
        }

        public void RemoveAt(int index)
        {
            NativeDataColumnCollection.RemoveAt(index);
        }

        public int Count
        {
            get
            {
                return NativeDataColumnCollection.Count;
            }
        }





        public System.Collections.IEnumerator GetEnumerator()
        {
            return NativeDataColumnCollection.GetEnumerator();
        }

    #endregion
    }

    /// <MetaDataID>{f5cfae57-06d8-4bd7-827e-c1ed00b1cd77}</MetaDataID>
    public class DataRelationCollection : IDataRelationCollection
    {
        System.Data.DataRelationCollection NativeDataRelationCollection;
        public DataRelationCollection(System.Data.DataRelationCollection nativeDataRelationCollection)
        {
            NativeDataRelationCollection = nativeDataRelationCollection;
        }
        void IDataRelationCollection.Add(IDataRelation relation)
        {
            NativeDataRelationCollection.Add(relation as System.Data.DataRelation);
        }

        IDataRelation IDataRelationCollection.this[int index]
        {
            get
            {
                return NativeDataRelationCollection[index] as IDataRelation;
            }
        }
        IDataRelation IDataRelationCollection.this[string name]
        {
            get
            {
                return NativeDataRelationCollection[name] as IDataRelation;
            }
        }

        bool IDataRelationCollection.Contains(string name)
        {
            return NativeDataRelationCollection.Contains(name);
        }


    #region IDataRelationCollection Members


        IDataRelation IDataRelationCollection.Add(IDataColumn parentColumn, IDataColumn childColumn)
        {
            DataRelation dataRelation = new DataRelation("", parentColumn, childColumn);
            NativeDataRelationCollection.Add(dataRelation);
            return dataRelation;
        }

        IDataRelation IDataRelationCollection.Add(IDataColumn[] parentColumns, IDataColumn[] childColumns)
        {
            DataRelation dataRelation = new DataRelation("", parentColumns, childColumns);
            NativeDataRelationCollection.Add(dataRelation);
            return dataRelation;
        }

        IDataRelation IDataRelationCollection.Add(string name, IDataColumn parentColumn, IDataColumn childColumn)
        {
            DataRelation dataRelation = new DataRelation(name, parentColumn, childColumn);
            NativeDataRelationCollection.Add(dataRelation);
            return dataRelation;
        }

        IDataRelation IDataRelationCollection.Add(string name, IDataColumn[] parentColumns, IDataColumn[] childColumns)
        {
            DataRelation dataRelation = new DataRelation(name, parentColumns, childColumns);
            NativeDataRelationCollection.Add(dataRelation);
            return dataRelation;
        }

        IDataRelation IDataRelationCollection.Add(string name, IDataColumn parentColumn, IDataColumn childColumn, bool createConstraints)
        {
            DataRelation dataRelation = new DataRelation(name, parentColumn, childColumn, createConstraints);
            NativeDataRelationCollection.Add(dataRelation);
            return dataRelation;
        }

        IDataRelation IDataRelationCollection.Add(string name, IDataColumn[] parentColumns, IDataColumn[] childColumns, bool createConstraints)
        {
            DataRelation dataRelation = new DataRelation(name, parentColumns, childColumns, createConstraints);
            NativeDataRelationCollection.Add(dataRelation);
            return dataRelation;
        }

    #endregion

    #region IDataRelationCollection Members


        void IDataRelationCollection.Clear()
        {
            NativeDataRelationCollection.Clear();
        }


    #endregion

    #region IEnumerable Members

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return NativeDataRelationCollection.GetEnumerator();
        }

    #endregion
    }

    /// <MetaDataID>{c825d879-19d9-4f7d-92fb-f358047b0485}</MetaDataID>
    public class DataRowCollection : IDataRowCollection
    {

        System.Data.DataRowCollection NativeDataRowCollection;
        public DataRowCollection(System.Data.DataRowCollection nativeDataRowCollection)
        {
            NativeDataRowCollection = nativeDataRowCollection;

        }
    #region IDataRowCollection Members

        int IDataRowCollection.Count
        {
            get { return NativeDataRowCollection.Count; }
        }

        IDataRow IDataRowCollection.this[int index]
        {
            get { return NativeDataRowCollection[index] as IDataRow; }
        }

        void IDataRowCollection.Add(IDataRow row)
        {
            NativeDataRowCollection.Add(row as System.Data.DataRow);

        }

        IDataRow IDataRowCollection.Add(params object[] values)
        {
            return NativeDataRowCollection.Add(values) as IDataRow;
        }

        void IDataRowCollection.Clear()
        {
            NativeDataRowCollection.Clear();
        }

        bool IDataRowCollection.Contains(object key)
        {
            return NativeDataRowCollection.Contains(key);
        }

        bool IDataRowCollection.Contains(object[] keys)
        {
            return NativeDataRowCollection.Contains(keys);
        }

        void IDataRowCollection.CopyTo(Array ar, int index)
        {
            NativeDataRowCollection.CopyTo(ar, index);
        }

        void IDataRowCollection.CopyTo(IDataRow[] array, int index)
        {
            NativeDataRowCollection.CopyTo(array, index);
        }

        IDataRow IDataRowCollection.Find(object key)
        {
            return NativeDataRowCollection.Find(key) as IDataRow;

        }

        IDataRow IDataRowCollection.Find(object[] keys)
        {
            return NativeDataRowCollection.Find(keys) as IDataRow;
        }

        System.Collections.IEnumerator IDataRowCollection.GetEnumerator()
        {
            return NativeDataRowCollection.GetEnumerator();
        }

        int IDataRowCollection.IndexOf(IDataRow row)
        {
            return NativeDataRowCollection.IndexOf(row as DataRow);
        }

        void IDataRowCollection.InsertAt(IDataRow row, int pos)
        {
            NativeDataRowCollection.InsertAt(row as DataRow, pos);
        }

        void IDataRowCollection.Remove(IDataRow row)
        {
            NativeDataRowCollection.Remove(row as DataRow);
        }

        void IDataRowCollection.RemoveAt(int index)
        {
            NativeDataRowCollection.RemoveAt(index);

        }

        IDataRow[] IDataRowCollection.ToArray()
        {
            return NativeDataRowCollection.OfType<IDataRow>().ToArray();
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return NativeDataRowCollection.GetEnumerator();
        }

    #endregion
    }

    /// <MetaDataID>{70dfc2a2-db95-479b-a419-f98fe4af29e3}</MetaDataID>
    public class DataRelation : System.Data.DataRelation, IDataRelation
    {
        // Summary:
        //     Initializes a new instance of the System.Data.DataRelation class using the
        //     specified System.Data.DataRelation name, and parent and child System.Data.DataColumn
        //     objects.
        //
        // Parameters:
        //   relationName:
        //     The name of the System.Data.DataRelation. If null or an empty string (""),
        //     a default name will be given when the created object is added to the System.Data.DataRelationCollection.
        //
        //   parentColumn:
        //     The parent System.Data.DataColumn in the relationship.
        //
        //   childColumn:
        //     The child System.Data.DataColumn in the relationship.
        //
        // Exceptions:
        //   System.ArgumentNullException:
        //     One or both of the System.Data.DataColumn objects contains null.
        //
        //   System.Data.InvalidConstraintException:
        //     The columns have different data types -Or- The tables do not belong to the
        //     same System.Data.DataSet.
        public DataRelation(string relationName, IDataColumn parentColumn, IDataColumn childColumn)
            : base(relationName, parentColumn as DataColumn, childColumn as DataColumn)
        {

        }
        //
        // Summary:
        //     Initializes a new instance of the System.Data.DataRelation class using the
        //     specified System.Data.DataRelation name and matched arrays of parent and
        //     child System.Data.DataColumn objects.
        //
        // Parameters:
        //   relationName:
        //     The name of the relation. If null or an empty string (""), a default name
        //     will be given when the created object is added to the System.Data.DataRelationCollection.
        //
        //   parentColumns:
        //     An array of parent System.Data.DataColumn objects.
        //
        //   childColumns:
        //     An array of child System.Data.DataColumn objects.
        //
        // Exceptions:
        //   System.ArgumentNullException:
        //     One or both of the System.Data.DataColumn objects contains null.
        //
        //   System.Data.InvalidConstraintException:
        //     The System.Data.DataColumn objects have different data types -Or- One or
        //     both of the arrays are not composed of distinct columns from the same table.-Or-
        //     The tables do not belong to the same System.Data.DataSet.
        public DataRelation(string relationName, IDataColumn[] parentColumns, IDataColumn[] childColumns)
            : base(relationName, parentColumns.OfType<System.Data.DataColumn>().ToArray(), childColumns.OfType<System.Data.DataColumn>().ToArray())
        {

        }
        //
        // Summary:
        //     Initializes a new instance of the System.Data.DataRelation class using the
        //     specified name, parent and child System.Data.DataColumn objects, and a value
        //     that indicates whether to create constraints.
        //
        // Parameters:
        //   relationName:
        //     The name of the relation. If null or an empty string (""), a default name
        //     will be given when the created object is added to the System.Data.DataRelationCollection.
        //
        //   parentColumn:
        //     The parent System.Data.DataColumn in the relation.
        //
        //   childColumn:
        //     The child System.Data.DataColumn in the relation.
        //
        //   createConstraints:
        //     A value that indicates whether constraints are created. true, if constraints
        //     are created. Otherwise, false.
        //
        // Exceptions:
        //   System.ArgumentNullException:
        //     One or both of the System.Data.DataColumn objects contains null.
        //
        //   System.Data.InvalidConstraintException:
        //     The columns have different data types -Or- The tables do not belong to the
        //     same System.Data.DataSet.
        public DataRelation(string relationName, IDataColumn parentColumn, IDataColumn childColumn, bool createConstraints)
            : base(relationName, parentColumn as System.Data.DataColumn, childColumn as System.Data.DataColumn, createConstraints)
        {

        }
        //
        // Summary:
        //     Initializes a new instance of the System.Data.DataRelation class using the
        //     specified name, matched arrays of parent and child System.Data.DataColumn
        //     objects, and value that indicates whether to create constraints.
        //
        // Parameters:
        //   relationName:
        //     The name of the relation. If null or an empty string (""), a default name
        //     will be given when the created object is added to the System.Data.DataRelationCollection.
        //
        //   parentColumns:
        //     An array of parent System.Data.DataColumn objects.
        //
        //   childColumns:
        //     An array of child System.Data.DataColumn objects.
        //
        //   createConstraints:
        //     A value that indicates whether to create constraints. true, if constraints
        //     are created. Otherwise, false.
        //
        // Exceptions:
        //   System.ArgumentNullException:
        //     One or both of the System.Data.DataColumn objects is null.
        //
        //   System.Data.InvalidConstraintException:
        //     The columns have different data types -Or- The tables do not belong to the
        //     same System.Data.DataSet.
        public DataRelation(string relationName, IDataColumn[] parentColumns, IDataColumn[] childColumns, bool createConstraints)
            : base(relationName, parentColumns.OfType<System.Data.DataColumn>().ToArray(), childColumns.OfType<System.Data.DataColumn>().ToArray(), createConstraints)
        {

        }
        //
        // Summary:
        //     This constructor is provided for design time support in the Visual Studio
        //     environment.
        //
        // Parameters:
        //   relationName:
        //     The name of the relation. If null or an empty string (""), a default name
        //     will be given when the created object is added to the System.Data.DataRelationCollection.
        //
        //   parentTableName:
        //     The name of the System.Data.DataTable that is the parent table of the relation.
        //
        //   childTableName:
        //     The name of the System.Data.DataTable that is the child table of the relation.
        //
        //   parentColumnNames:
        //     An array of System.Data.DataColumn object names in the parent System.Data.DataTable
        //     of the relation.
        //
        //   childColumnNames:
        //     An array of System.Data.DataColumn object names in the child System.Data.DataTable
        //     of the relation.
        //
        //   nested:
        //     A value that indicates whether relationships are nested.

        public DataRelation(string relationName, string parentTableName, string childTableName, string[] parentColumnNames, string[] childColumnNames, bool nested)
            : base(relationName, parentTableName, childTableName, parentColumnNames, childColumnNames, nested)
        {

        }
        //
        // Summary:
        //     This constructor is provided for design time support in the Visual Studio
        //     environment.
        //
        // Parameters:
        //   relationName:
        //     The name of the System.Data.DataRelation. If null or an empty string (""),
        //     a default name will be given when the created object is added to the System.Data.DataRelationCollection.
        //
        //   parentTableName:
        //     The name of the System.Data.DataTable that is the parent table of the relation.
        //
        //   parentTableNamespace:
        //     The name of the parent table namespace.
        //
        //   childTableName:
        //     The name of the System.Data.DataTable that is the child table of the relation.
        //
        //   childTableNamespace:
        //     The name of the child table namespace.
        //
        //   parentColumnNames:
        //     An array of System.Data.DataColumn object names in the parent System.Data.DataTable
        //     of the relation.
        //
        //   childColumnNames:
        //     An array of System.Data.DataColumn object names in the child System.Data.DataTable
        //     of the relation.
        //
        //   nested:
        //     A value that indicates whether relationships are nested.

        public DataRelation(string relationName, string parentTableName, string parentTableNamespace, string childTableName, string childTableNamespace, string[] parentColumnNames, string[] childColumnNames, bool nested) :
            base(relationName, parentTableName, parentTableNamespace, childTableName, childTableNamespace, parentColumnNames, childColumnNames, nested)
        {

        }


    }


    /// <MetaDataID>{a7ba13af-ccd1-4f72-b8e4-1cb42b465f3c}</MetaDataID>
    public class DataReader : IDataReader
    {
        System.Data.IDataReader NativeDataReader;
        public DataReader(System.Data.IDataReader dataReader)
        {
            NativeDataReader = dataReader;
        }

    

        bool IDataReader.Read()
        {
            return NativeDataReader.Read();
        }

        int IDataReader.GetValues(object[] values)
        {
            return NativeDataReader.GetValues(values);
        }

        int IDataReader.GetOrdinal(string name)
        {
            return NativeDataReader.GetOrdinal(name);
        }

        string IDataReader.GetName(int i)
        {
            return NativeDataReader.GetName(i);
        }

        int IDataReader.FieldCount
        {
            get { return NativeDataReader.FieldCount; }
        }

        Type IDataReader.GetFieldType(int i)
        {
            return NativeDataReader.GetFieldType(i);
        }




        public object this[int ordinal]
        {
            get { return NativeDataReader[ordinal]; }
        }

        public object this[RelationPartIdentity name]
        {
            get { return NativeDataReader[name]; }
        }




        public void Close()
        {
            NativeDataReader.Close();
        }


        #region IDataReader Members


        public bool NextResult()
        {
           return NativeDataReader.NextResult();
        }

        #endregion
    }
#endif

}

/*
 <PropertyGroup>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
  </PropertyGroup>


    */