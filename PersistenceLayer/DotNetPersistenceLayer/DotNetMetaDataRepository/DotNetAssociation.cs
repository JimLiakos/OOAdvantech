using System.Linq;
using OOAdvantech.MetaDataRepository;

namespace OOAdvantech.DotNetMetaDataRepository
{
	/// <MetaDataID>{1B6A6274-09FB-4353-A9E7-C33E30E02C50}</MetaDataID>
	public class Association : MetaDataRepository.Association
    {
        public override ObjectMemberGetSet SetMemberValue(object token, System.Reflection.MemberInfo member, object value)
        {
            if (member.Name == nameof(ExtensionMetaObjects))
            {
                if (value == null)
                    ExtensionMetaObjects = default(System.Collections.Generic.List<object>);
                else
                    ExtensionMetaObjects = (System.Collections.Generic.List<object>)value;
                return ObjectMemberGetSet.MemberValueSetted;
            }
            if (member.Name == nameof(AutoGeneratedIdentity))
            {
                if (value == null)
                    AutoGeneratedIdentity = default(bool);
                else
                    AutoGeneratedIdentity = (bool)value;
                return ObjectMemberGetSet.MemberValueSetted;
            }

            return base.SetMemberValue(token, member, value);
        }

        public override object GetMemberValue(object token, System.Reflection.MemberInfo member)
        {

            if (member.Name == nameof(ExtensionMetaObjects))
                return GetExtensionMetaObjects();

            if (member.Name == nameof(AutoGeneratedIdentity))
                return AutoGeneratedIdentity;


            return base.GetMemberValue(token, member);
        }

        /// <MetaDataID>{9e629859-1313-4d3f-9339-51953ac82cb6}</MetaDataID>
        public override void Synchronize(OOAdvantech.MetaDataRepository.MetaObject OriginMetaObject)
        {
            //base.Synchronize(OriginMetaObject);
        }
        public override void ShallowSynchronize(MetaObject originClassifier)
        {
        }
        /// <MetaDataID>{36FB38E5-1DD6-46BF-AD5B-67785F707064}</MetaDataID>
		protected Association()
		{    
		} 
         
		/// <MetaDataID>{82DFA29B-4D3C-453E-AECC-0E190D3B3F86}</MetaDataID>
		public override MetaDataRepository.MetaObjectID Identity
		{
			get
			{   
				return _Identity;
			}
		}
		/// <summary>
		/// This field defines a collection with the extension Meta objects. 
		/// Extension meta object is an object which keep more information 
		/// for the origin meta object in a specific context. </summary>
		/// <MetaDataID>{0B171632-365C-4E4F-89D0-2D07B11545F8}</MetaDataID>
        private System.Collections.Generic.List<object> ExtensionMetaObjects=new System.Collections.Generic.List<object>();

        



        /// <MetaDataID>{43A38E06-A672-4C75-8A0B-FC6FC73802C1}</MetaDataID>
        public void AddExtensionMetaObject(object Value)
		{
            lock (ExtensionMetaObjectsLock)
            {
                ExtensionMetaObjects.Add(Value);
            }
			
		}

		/// <MetaDataID>{A38A961D-60E2-4FF5-B06C-4A6606046AEF}</MetaDataID>
        public override System.Collections.Generic.List<object> GetExtensionMetaObjects()
		{
            lock (ExtensionMetaObjectsLock)
            {
                return ExtensionMetaObjects.ToList();
            }
           
		}




        /// <MetaDataID>{242e581b-e584-48f5-9dc1-0521b42d63e8}</MetaDataID>
        bool AutoGeneratedIdentity;

		/// <MetaDataID>{9B0CA6E1-D91B-4F9A-8877-722A2D2F73BF}</MetaDataID>
        public Association(System.Reflection.Assembly assembly, MetaDataRepository.AssociationAttribute associationAttribute, AssociationEnd roleA, AssociationEnd roleB)
        {
            //AccessorBuilder.InitObject(this);
            _Name = associationAttribute.AssociationName;
            if (!string.IsNullOrEmpty(associationAttribute.Identity))
            {
                OOAdvantech.MetaDataRepository.BackwardCompatibilityID  backwardCompatibilityID =Assembly.GetBackwardCompatibilityID(assembly);
                if(backwardCompatibilityID!=null)
                    _Identity = new MetaDataRepository.MetaObjectID(backwardCompatibilityID.ToString()+"."+associationAttribute.Identity);
                else
                    _Identity = new MetaDataRepository.MetaObjectID(associationAttribute.Identity);

            }
            else
            {
                _Identity = new MetaDataRepository.MetaObjectID("A:" + roleA.Specification.Identity.ToString() + "." + Name + "." + roleB.Specification.Identity.ToString());
                AutoGeneratedIdentity = true;
            }
            
          
                MetaObjectMapper.AddMetaObject(this, FullName);
          

            if (associationAttribute.IsRoleA)
                roleA.Indexer = associationAttribute.Indexer;
            else
                roleB.Indexer = associationAttribute.Indexer;

            SetRoleAAssociationEnd(roleA);
            SetRoleBAssociationEnd(roleB);
            roleA.SetAssociation(this);
            roleB.SetAssociation(this);
            if ( associationAttribute.GeneralAssociationIdentity!=null)
            {
                MetaDataRepository.Classifier classifier = roleA.Specification;
                //if (associationAttribute.IsRoleA)
                //{
                //    foreach (MetaDataRepository.Generalization generalization in (RoleA.Namespace as MetaDataRepository.Classifier).Generalizations)
                //    {
                //        classifier = generalization.Parent;
                //        break;
                //    }
                //}
                //else
                //{
                //    foreach (MetaDataRepository.Generalization generalization in (RoleB.Namespace as MetaDataRepository.Classifier).Generalizations)
                //    {
                //        classifier = generalization.Parent;
                //        break;
                //    }
                //}
                

                foreach (AssociationEnd role in classifier.GetRoles(true))
                {
                    if (role.Association.Identity.ToString() == associationAttribute.GeneralAssociationIdentity)
                    {
                        _General.Value = role.Association;
                        break;
                    }
                }
                if(_General.Value==null)
                {
                    classifier = roleB.Specification;
                    foreach (AssociationEnd role in classifier.GetRoles(true))
                    {
                        if (role.Association.Identity.ToString() == associationAttribute.GeneralAssociationIdentity)
                        {
                            _General.Value = role.Association;
                            break;
                        }
                    }
                }

                if(_General.Value!=null)
                    _General.Value.AddSpecialization(this);
            }

            if (roleA.Specification is Interface)
                (roleA.Specification as Interface).AddAssociationEnd(roleA);
            if (roleA.Specification is Class)
                (roleA.Specification as Class).AddAssociationEnd(roleA);
            if (roleA.Specification is Structure)
                (roleA.Specification as Structure).AddAssociationEnd(roleA);


            if (roleB.Specification is Interface)
                (roleB.Specification as Interface).AddAssociationEnd(roleB);
            if (roleB.Specification is Class)
                (roleB.Specification as Class).AddAssociationEnd(roleB);
            if (roleB.Specification is Structure)
                (roleB.Specification as Structure).AddAssociationEnd(roleB);
        }
	
		/// <MetaDataID>{5A681DC6-6B18-42AE-9B62-C3A7663430FC}</MetaDataID>
		void SetRoleBAssociationEnd(AssociationEnd theAssociationEnd)
		{
			OOAdvantech.Synchronization.LockCookie lockCookie=ReaderWriterLock.UpgradeToWriterLock(10000);
			try
			{
				if(RoleB==null)
					_Connections.Add(theAssociationEnd);
				else
					if(RoleB!=theAssociationEnd)
						throw new System.Exception("You can not change AssociationEnd");
				theAssociationEnd.IsRoleA=false;
				if(((AssociationEnd)theAssociationEnd).WrMemberInfo!=null)
				{
					object[] Attributes =((AssociationEnd)theAssociationEnd).WrMemberInfo.GetCustomAttributes(typeof(MetaDataRepository.AssociationClass),false);
					if(Attributes.Length>0)
					{
						System.Type AssociationType=((MetaDataRepository.AssociationClass)Attributes[0]).AssocciationClass;

						if(AssociationType.GetMetaData().IsClass||AssociationType.GetMetaData().IsInterface)
                            _LinkClass = Type.GetClassifierObject(AssociationType) ;
					}
                    
				}
			}
			finally
			{
				ReaderWriterLock.DowngradeFromWriterLock(ref lockCookie);
			}
		}
		/// <MetaDataID>{AC450E1B-9AFB-4629-BE6B-8BF9A539EA02}</MetaDataID>
		void SetRoleAAssociationEnd(MetaDataRepository.AssociationEnd theAssociationEnd)
		{
			OOAdvantech.Synchronization.LockCookie lockCookie=ReaderWriterLock.UpgradeToWriterLock(10000);
			try
			{
				if(RoleA==null)
					_Connections.Add(theAssociationEnd);
				else
					if(RoleA!=theAssociationEnd)
						throw new System.Exception("You can not change AssociationEnd");
				theAssociationEnd.IsRoleA=true;
				if(((AssociationEnd)theAssociationEnd).WrMemberInfo!=null)
				{

					object[] Attributes =((AssociationEnd)theAssociationEnd).WrMemberInfo.GetCustomAttributes(typeof(MetaDataRepository.AssociationClass),false);
					if(Attributes.Length>0)
					{
						System.Type AssociationType=((MetaDataRepository.AssociationClass)Attributes[0]).AssocciationClass;

                        if (AssociationType.GetMetaData().IsClass || AssociationType.GetMetaData().IsInterface)
                            _LinkClass = Type.GetClassifierObject(AssociationType); ;
					}
				}
			}
			finally
			{
				ReaderWriterLock.DowngradeFromWriterLock(ref lockCookie);
			}
		}
	}
}
