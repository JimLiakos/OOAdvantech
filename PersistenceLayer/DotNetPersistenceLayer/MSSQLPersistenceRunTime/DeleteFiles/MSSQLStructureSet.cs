namespace OOAdvantech.MSSQLPersistenceRunTime.ObjectQueryLanguage
{
    using OOAdvantech.MetaDataRepository.ObjectQueryLanguage;

	/// <MetaDataID>{F5B7322C-F1D3-4CE4-84BB-159E8427FCD8}</MetaDataID>
	public class StructureSet:PersistenceLayerRunTime.StructureSet
	{
        //void GetRelatedObjects(PersistenceLayer.StructureSet parentStructureSet)
        //{
        //    System.Collections.ArrayList objectMembers = (Members as MemberList).GetobjectTypeMembers();

        //    foreach (StructureSet structureSetInstance in this)
        //    {
        //        foreach (MemberObject member in objectMembers)
        //        {

        //        }
        //    }
            

        //}


		
		/// <MetaDataID>{6CD0A13A-1EAD-4EB3-A9B4-723DDAEC1BDF}</MetaDataID>
		public override object GetData()
		{
			StructureSet objectSet = this;
            foreach (StructureSet objectSetInstance in objectSet)
            {
                object obj1 = objectSet["OrderName"];
                object obj2 = objectSet["OrderDetailName"];
                StructureSet obj3 = objectSet["OrderDetails"] as StructureSet;
                foreach (StructureSet orderDetailsInstance in obj3)
                {
                    object obj4 = orderDetailsInstance["OrderDetailName"];
                    //AbstractionsAndPersistency.OrderDetail ddsd = obj4 as AbstractionsAndPersistency.OrderDetail;
                    //string nam;
                    //if (ddsd != null)
                    //    nam = ddsd.Name;
                    //int erte = 0;
                }
            }

                
			//PersistenceLayerRunTime.StructureSet.
			DataBlock mDataBlock=GetInstanceOfDataBlock();
            
            System.Data.DataSet dataSet = new System.Data.DataSet();
            mDataBlock.Data = dataSet;
            (Members as MemberList).CloneDataSet(mDataBlock);
            


            //foreach(DataNode CurrDataNode in this.mOQLStatement.SelectListItems)
            //{
            //    if(CurrDataNode.AutoGenerated)
            //        continue;
			
            //    System.Data.DataColumn DataColumn;
            //    if(CurrDataNode.Alias==null)
            //    {
					
            //        DataColumn=mDataBlock.DataTable.Columns.Add(CurrDataNode.Name);
            //        if(CurrDataNode.Type==DataNode.DataNodeType.Object)
            //        {
            //            DataColumn.DataType=typeof(int);;
            //            mDataBlock.ColumnsWithObject.Add(CurrDataNode.Name);
            //        }
            //        else
            //            DataColumn.DataType=TypeDictionary.GetDotNetType(((MetaDataRepository.Attribute)CurrDataNode.AssignedMetaObject).Type.FullName);
					
            //    }
            //    else
            //    {
					
            //        DataColumn=mDataBlock.DataTable.Columns.Add(CurrDataNode.Alias);
            //        if(CurrDataNode.Type==DataNode.DataNodeType.Object)
            //        {
            //            DataColumn.DataType=typeof(int);
            //            mDataBlock.ColumnsWithObject.Add(CurrDataNode.Alias);
            //        }
            //        else
            //            DataColumn.DataType=TypeDictionary.GetDotNetType(((MetaDataRepository.Attribute)CurrDataNode.AssignedMetaObject).Type.FullName);
					
            //    }
            //    //DataColumn.DataType
            //}
            //bool SetDataType=true;
            //foreach( PersistenceLayer.StructureSet Rowset  in this)
            //{
            //    System.Data.DataRow NewDataRow=mDataBlock.DataTable.NewRow();

            //    foreach(DataNode CurrDataNode in this.mOQLStatement.SelectListItems)
            //    {
					
            //        if(CurrDataNode.AutoGenerated)
            //            continue;

            //        object Value=null;
            //        string ColumnName;
            //        if(CurrDataNode.Alias==null)
            //            ColumnName=CurrDataNode.Name;
            //        else
            //            ColumnName=CurrDataNode.Alias;


            //        Value=Members[ColumnName].Value;
            //        if(CurrDataNode.Type==DataNode.DataNodeType.Object)
            //        {
            //            if(Value !=null)
            //            {
            //                if(Value is System.MarshalByRefObject)
            //                {
            //                    if(!mDataBlock.Objects.Contains(Value.GetHashCode()))
            //                        mDataBlock.Objects.Add(Value.GetHashCode(),Value);
            //                    NewDataRow[ColumnName]=Value.GetHashCode();
            //                }
            //            }
            //        } 
            //        else
            //            NewDataRow[ColumnName]=Value;/**/
            //    }
            //    mDataBlock.DataTable.Rows.Add(NewDataRow);
            //    SetDataType=false;
            //}
			return mDataBlock;
		}
		/// <MetaDataID>{CB3E5553-2199-46F0-8E39-723071D98C79}</MetaDataID>
		public override void Close()
		{
		
			MainDataReader.Clear();
			MainDataReader=null;
			mOleDbConnection=null;
			mOQLStatement=null;
            
			DataRowEnumerator=null;
			SourceStorageSession=null;
			Members=null;

		}
		/// <MetaDataID>{57492156-ECCB-4C9B-ABCB-F7EF77DA1070}</MetaDataID>
		private OQLStatement mOQLStatement;


	

		/// <MetaDataID>{209FE914-A7F3-4BAF-8F14-FCFC0A0441C3}</MetaDataID>
		public override void MoveToPage(int pageNumber)
		{
			throw new System.NotImplementedException("Paging feature doesn,t supported yet");

		}
		/// <MetaDataID>{9A12C91E-FF98-48A4-A0FA-EC53092BBF2D}</MetaDataID>
		public override bool MoveNextPage()
		{
			throw new System.NotImplementedException("Paging feature doesn,t supported yet");

		}
		/// <MetaDataID>{8713D7B4-5489-4E26-9623-2209606F087B}</MetaDataID>
		public override int PagingActivated
		{
			get
			{
				throw new System.NotImplementedException("Paging feature doesn,t supported yet");

			}
			set
			{
				throw new System.NotImplementedException("Paging feature doesn,t supported yet");
			}
		}



		/// <MetaDataID>{C63D08EA-4697-4CCF-8534-793359DEB43F}</MetaDataID>
		/// <exclude>Excluded</exclude>
		private int _PageCount;
		/// <MetaDataID>{0948AEC4-4BDD-4546-98A9-D5F697B63E28}</MetaDataID>
		public override int PageCount
		{
			get
			{
				throw new System.NotImplementedException("Paging feature doesn,t supported yet");
			}
		}
	
		/// <MetaDataID>{CB7B0FF2-A712-4B82-9EA7-65E619C49DEE}</MetaDataID>
		/// <exclude>Excluded</exclude>
		private int _PageSize;
		/// <MetaDataID>{19867C92-4CB1-4149-AE18-9D7E016AEAB7}</MetaDataID>
		public override int PageSize
		{
			get
			{
				throw new System.NotImplementedException("Paging feature doesn,t supported yet");
			}
			set
			{
				throw new System.NotImplementedException("Paging feature doesn,t supported yet");
			}
		}
        public MemberList Members;
		/// <MetaDataID>{8BC6A6EF-B81D-4AA4-890C-229BA7C7D51D}</MetaDataID>
        protected void BuildStructureSetMembers()
        {
            if (Members == null)
                Members = new MemberList(mOQLStatement.DataTrees[0] as MetaDataRepository.ObjectQueryLanguage.DataNode);


        }
		/// <MetaDataID>{929CF566-DF47-4231-812D-946065B30E7A}</MetaDataID>
        private System.Collections.IEnumerator DataRowEnumerator;
		/// <MetaDataID>{15AB3FCC-05D6-43A6-B803-1D90E20D2F93}</MetaDataID>
		internal StructureSet(ObjectStorage objectStorage)
		{
			SourceStorageSession=objectStorage;
		}
        DataNode RootDataNode;
        internal StructureSet(MemberList memberList, System.Collections.IEnumerator dataRowEnumerator)
        {
            Members = memberList;
            DataRowEnumerator = dataRowEnumerator;
        }

		/// <MetaDataID>{33F636EB-AA08-4057-87B6-6ECEC91B76E1}</MetaDataID>
		~StructureSet()
		{
			try
			{
				System.Diagnostics.Debug.WriteLine("\n\n\n********************  ~StructureSet() ********************************");
				MainDataReader.Clear();
			}
			catch(System.Exception Error)
			{

			}
			//if(mOleDbConnection!=null)
				//if(mOleDbConnection.State==System.Data.ConnectionState.Open)
				//	mOleDbConnection.Close();

		}
		/// <summary>The default position of the StructureSet is prior to the first record. Therefore, you must call MoveNext to begin accessing any data.
		/// Return Value true if there are more rows; otherwise, false</summary>
		/// <MetaDataID>{E9353DF6-2662-4BFE-8B4B-EA180FB86B49}</MetaDataID>
		public override bool MoveNext()
		{
			bool HasMoreRows=DataRowEnumerator.MoveNext();
			if(!HasMoreRows)
				return false;
			if(Members==null)
				BuildStructureSetMembers();		
			(Members as MemberList).DataRecord=DataRowEnumerator.Current as System.Data.DataRow;

			return true;
		
		}

		/// <MetaDataID>{57377E78-34AB-477D-8601-46F43A84211A}</MetaDataID>
		public override void MoveFirst()
		{
            if (Members == null)
                BuildStructureSetMembers();

            if(DataRowEnumerator==null)
                DataRowEnumerator=(Members as MemberList).RootDataNode.DataSource.DataTable.Rows.GetEnumerator(); 

            DataRowEnumerator.Reset();
			
		}
		
		/// <MetaDataID>{33F8DBB6-A37D-4881-9AD8-0B2990BEDF7C}</MetaDataID>
		private System.Data.SqlClient.SqlConnection mOleDbConnection;
		/// <MetaDataID>{7DD8A758-5CBE-4E87-B6BE-5897B0A649EE}</MetaDataID>
		private System.Data.DataSet MainDataReader=new System.Data.DataSet();

		


			/// <summary>Mitsos</summary>
			/// <param name="Query">Kitsos Lala</param>
			/// <MetaDataID>{73A00762-8246-45FF-8634-F4CAE53F3961}</MetaDataID>
		public void Open(string Query,OOAdvantech.Collections.Hashtable parameters)
		{

   


			
			MainDataReader.Clear();



            
            mOQLStatement=new OQLStatement(parameters);
            mOQLStatement.Build(Query,(ObjectStorage)SourceStorageSession);
            mOQLStatement.LoadData();
            //(mOQLStatement.DataTrees[0] as MetaDataRepository.ObjectQueryLanguage.DataNode).DataSource.LoadData();

            
            (mOQLStatement.DataTrees[0] as MetaDataRepository.ObjectQueryLanguage.DataNode).LoadData(MainDataReader);
            //DataRowEnumerator= MainDataReader.Tables[0].Rows.GetEnumerator();
            return;
            string SQLQuery ="";
            System.Collections.Generic.List<DataNode> tableDataNodes=new System.Collections.Generic.List<DataNode>();
			//string SQLQuery=mOQLStatement.GetSQLQuery(ref tableDataNodes);
            goto TestDataTransfer;

            

            
            ObjectStorage storageSessionB = null;

            storageSessionB = (ObjectStorage.OpenStorage("AbstractionsB",
                @"localhost\Family",
                "OOAdvantech.MSSQLPersistenceRunTime.StorageProvider") as PersistenceLayerRunTime.ClientSide.ObjectStorageAgent).ServerSideStorageSession as ObjectStorage;
            DataNode dataNode = mOQLStatement.DataTrees[0] as DataNode;
            RDBMSMetaDataRepository.StorageCellReference stgCell=null;
            foreach (RDBMSMetaDataRepository.StorageCellReference storageCell in (dataNode.SubDataNodes[0].SubDataNodes[2] as DataNode).DataSource.StorageCells)
            {
                stgCell = storageCell;
                break;

            }

            storageSessionB.GetData(dataNode,stgCell.RealStorageCell);

            

            return;

            

            //string SQLQuery = "SELECT * FROM T_Order";
			if(SQLQuery.Length==0)
				return;
        TestDataTransfer:
//            SQLQuery="SELECT DISTINCT Concrete_Order.Name AS Expr1, "+
//"	 Concrete_Order. ObjectID AS Expr2, "+
//"	 Concrete_Order. ReferenceCount AS Expr3, "+
//"	 Concrete_Order.ClientOrders_ObjectIDA AS Expr4, "+
//"	 Concrete_Order.TypeID AS Expr5 "+
//@"FROM         (SELECT * FROM OPENROWSET('SQLNCLI', 'Server=rocket\SQLExpress;Trusted_Connection=yes;','SELECT * FROM AbstractionsB.dbo.T_OrderDetail')) as T_OrderDetail  "+
//"INNER JOIN "+
//"                      Concrete_Order ON T_OrderDetail.OrderDetails_ObjectIDB = Concrete_Order.ObjectID "+

//"SELECT DISTINCT  T_Order.TypeID AS Expr5, "+
//"	T_OrderDetail.*  "+
//@"FROM         (SELECT * FROM OPENROWSET('SQLNCLI', 'Server=rocket\SQLExpress;Trusted_Connection=yes;','SELECT * FROM AbstractionsB.dbo.T_OrderDetail')) as T_OrderDetail  "+
//"INNER JOIN "+
//"                      T_Order ON T_OrderDetail.OrderDetails_ObjectIDB = T_Order.ObjectID"; 
            SQLQuery = "SELECT * FROM T_Order";
            System.TimeSpan NewTimeSpan;
            System.TimeSpan ComiteTimeSpan;
            System.TimeSpan ComiteTimeSpanB;
            System.DateTime before;
            System.DateTime After;
            before = System.DateTime.Now;


			mOleDbConnection= new System.Data.SqlClient.SqlConnection(((ObjectStorage)SourceStorageSession).DBConnection.ConnectionString);
			
			mOleDbConnection.Open();
			System.Data.SqlClient.SqlCommand  DataCommand=mOleDbConnection.CreateCommand();//((StorageSession)SourceStorageSession).OleDbConnection.CreateCommand();
			DataCommand.CommandText=SQLQuery;
            //System.Data.SqlClient.SqlDataReader dataReader = DataCommand.ExecuteReader();
            
            //System.Data.DataTable table = new System.Data.DataTable();
            //for (int i = 0; i != dataReader.FieldCount; i++)
            //    table.Columns.Add(dataReader.GetName(i), dataReader.GetFieldType(i));
            //object[] values = new object[dataReader.FieldCount];
            //while (dataReader.Read())
            //{
            //    dataReader.GetValues(values);
            //    table.LoadDataRow(values, false);
            //}
            //table.TableName = "Table";
            //int AutoIncr = 1;
            ////table.Load(dataReader, System.Data.LoadOption.Upsert);
            //MainDataReader.Tables.Add(table);
            //while (dataReader.NextResult())
            //{
            //    for (int i = 0; i != dataReader.FieldCount; i++)
            //        table.Columns.Add(dataReader.GetName(i), dataReader.GetFieldType(i));
            //    values=new object[dataReader.FieldCount];
            //    while (dataReader.Read())
            //    {
            //        dataReader.GetValues(values);
            //        table.LoadDataRow(values, false);
            //    }
            //    table.TableName = "Table" + AutoIncr.ToString();
            //    AutoIncr++;
            //    //table.Load(dataReader, System.Data.LoadOption.Upsert);
            //    MainDataReader.Tables.Add(table);
            //}
            System.Data.SqlClient.SqlDataAdapter myAdapter = new System.Data.SqlClient.SqlDataAdapter();
            //myAdapter.SelectCommand = DataCommand;
            //myAdapter.Fill(MainDataReader);
			mOleDbConnection.Close();
            After = System.DateTime.Now;
            ComiteTimeSpan = After - before;
            System.Diagnostics.Debug.WriteLine("1 " + ComiteTimeSpan.ToString());


            //int numOfObjects = MainDataReader.Tables[0].Rows.Count;
            //int objectIDIndex=MainDataReader.Tables[0].Columns.IndexOf("ObjectID");
          //  System.Guid[] objectIDs=new System.Guid[numOfObjects];
            //return;

            //int i = 0;
            //foreach (System.Data.DataRow row in MainDataReader.Tables[0].Rows)
            //{
            //    objectIDs[i] = (System.Guid)row[objectIDIndex];
            //    i++;
            //}


           // ObjectStorage storageSessionB = null;
            
            storageSessionB = (ObjectStorage.OpenStorage("AbstractionsB",
                @"localhost\Family",
                "OOAdvantech.MSSQLPersistenceRunTime.StorageProvider") as PersistenceLayerRunTime.ClientSide.ObjectStorageAgent).ServerSideStorageSession as ObjectStorage;


            byte[] buffer = storageSessionB.GetRelatedRows(null);
            System.Data.DataTable table = new System.Data.DataTable();
            table.Columns.Add("C1", typeof(System.Guid));
            table.Columns.Add("C2", typeof(System.Int32));
            table.Columns.Add("C3", typeof(System.Int32));
            table.Columns.Add("C4", typeof(System.String));
            table.Columns.Add("C5", typeof(System.Guid));




            int offset = 0;
            while (offset < buffer.Length)
            {
                System.Data.DataRow row= table.NewRow();
                row[0] = BinaryFormatter.BinaryFormatter.ToGuid(buffer, offset, ref offset);
                row[1] = BinaryFormatter.BinaryFormatter.ToInt32(buffer, offset, ref offset);
                row[2] = BinaryFormatter.BinaryFormatter.ToInt32(buffer, offset, ref offset);
                row[3] = BinaryFormatter.BinaryFormatter.ToString(buffer, offset, ref offset);
                row[4] = BinaryFormatter.BinaryFormatter.ToGuid(buffer, offset, ref offset);
                table.Rows.Add(row);

            }
            
            After = System.DateTime.Now;
            ComiteTimeSpan = After - before;
            System.Diagnostics.Debug.WriteLine("1 " + ComiteTimeSpan.ToString());
            before = System.DateTime.Now;
            return;

            int i=0;
            byte[] GuidStream=new byte[16];

            while (i < buffer.Length)
            {
                for (int k = 0; k < 16; k++)
                    GuidStream[k] = buffer[i + k];

                System.Guid guid = new System.Guid(GuidStream);
                i += 16;
            }
            

            //System.Data.DataTable table = dataSetSurrogate.ConvertToDataSet().Tables[0];
            After = System.DateTime.Now;
            ComiteTimeSpan = After - before;
            System.Diagnostics.Debug.WriteLine("1 " + ComiteTimeSpan.ToString());
            before = System.DateTime.Now;

            return ;
            //1 00:00:04.2812500
            //1 00:00:08.0625000

            



            
            //int k = 0;
            //foreach (DataNode dataNode in tableDataNodes)
            //{
            //    MainDataReader.Tables[k].TableName = dataNode.Name + dataNode.GetHashCode();
            //    k++;
            //}
            //mOQLStatement.BuildTablesRelations(MainDataReader);


            //DataRowEnumerator= MainDataReader.Tables[0].Rows.GetEnumerator();

		}
	}
}
